/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.integration.domain.tables.records;


import cn.vertxup.integration.domain.tables.DDocSegment;
import cn.vertxup.integration.domain.tables.interfaces.IDDocSegment;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record21;
import org.jooq.Row21;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DDocSegmentRecord extends UpdatableRecordImpl<DDocSegmentRecord> implements VertxPojo, Record21<String, String, String, String, String, String, String, String, String, Integer, Integer, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String>, IDDocSegment {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.KEY</code>. 「key」- 文档主键，唯一标识
     */
    @Override
    public DDocSegmentRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.KEY</code>. 「key」- 文档主键，唯一标识
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.CODE</code>. 「code」- 章节编号
     */
    @Override
    public DDocSegmentRecord setCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.CODE</code>. 「code」- 章节编号
     */
    @Override
    public String getCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.NAME</code>. 「name」- 章节标题
     */
    @Override
    public DDocSegmentRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.NAME</code>. 「name」- 章节标题
     */
    @Override
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.TYPE</code>. 「type」- 章节类型
     */
    @Override
    public DDocSegmentRecord setType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.TYPE</code>. 「type」- 章节类型
     */
    @Override
    public String getType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.PREFIX</code>. 「prefix」- 章节前缀
     */
    @Override
    public DDocSegmentRecord setPrefix(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.PREFIX</code>. 「prefix」- 章节前缀
     */
    @Override
    public String getPrefix() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.STATUS</code>. 「status」- 状态
     */
    @Override
    public DDocSegmentRecord setStatus(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.STATUS</code>. 「status」- 状态
     */
    @Override
    public String getStatus() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.CONTENT</code>. 「content」-
     * 章节内容（带格式）
     */
    @Override
    public DDocSegmentRecord setContent(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.CONTENT</code>. 「content」-
     * 章节内容（带格式）
     */
    @Override
    public String getContent() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.CONTENT_TEXT</code>.
     * 「contentText」- 无格式章节内容
     */
    @Override
    public DDocSegmentRecord setContentText(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.CONTENT_TEXT</code>.
     * 「contentText」- 无格式章节内容
     */
    @Override
    public String getContentText() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.CONTENT_STORE</code>.
     * 「contentStore」- 存储格式
     */
    @Override
    public DDocSegmentRecord setContentStore(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.CONTENT_STORE</code>.
     * 「contentStore」- 存储格式
     */
    @Override
    public String getContentStore() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.SORT</code>. 「sort」- 排序
     */
    @Override
    public DDocSegmentRecord setSort(Integer value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.SORT</code>. 「sort」- 排序
     */
    @Override
    public Integer getSort() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.LEVEL</code>. 「level」- 章节层级
     */
    @Override
    public DDocSegmentRecord setLevel(Integer value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.LEVEL</code>. 「level」- 章节层级
     */
    @Override
    public Integer getLevel() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.DOC_ID</code>. 「docId」-
     * 章节所属文档ID
     */
    @Override
    public DDocSegmentRecord setDocId(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.DOC_ID</code>. 「docId」-
     * 章节所属文档ID
     */
    @Override
    public String getDocId() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.PARENT_ID</code>. 「parentId」-
     * 父章节ID
     */
    @Override
    public DDocSegmentRecord setParentId(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.PARENT_ID</code>. 「parentId」-
     * 父章节ID
     */
    @Override
    public String getParentId() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public DDocSegmentRecord setSigma(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    @Override
    public DDocSegmentRecord setLanguage(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(14);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public DDocSegmentRecord setActive(Boolean value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(15);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    @Override
    public DDocSegmentRecord setMetadata(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(16);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public DDocSegmentRecord setCreatedAt(LocalDateTime value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(17);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public DDocSegmentRecord setCreatedBy(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(18);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public DDocSegmentRecord setUpdatedAt(LocalDateTime value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(19);
    }

    /**
     * Setter for <code>DB_ETERNAL.D_DOC_SEGMENT.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public DDocSegmentRecord setUpdatedBy(String value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.D_DOC_SEGMENT.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(20);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record21 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row21<String, String, String, String, String, String, String, String, String, Integer, Integer, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row21) super.fieldsRow();
    }

    @Override
    public Row21<String, String, String, String, String, String, String, String, String, Integer, Integer, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> valuesRow() {
        return (Row21) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return DDocSegment.D_DOC_SEGMENT.KEY;
    }

    @Override
    public Field<String> field2() {
        return DDocSegment.D_DOC_SEGMENT.CODE;
    }

    @Override
    public Field<String> field3() {
        return DDocSegment.D_DOC_SEGMENT.NAME;
    }

    @Override
    public Field<String> field4() {
        return DDocSegment.D_DOC_SEGMENT.TYPE;
    }

    @Override
    public Field<String> field5() {
        return DDocSegment.D_DOC_SEGMENT.PREFIX;
    }

    @Override
    public Field<String> field6() {
        return DDocSegment.D_DOC_SEGMENT.STATUS;
    }

    @Override
    public Field<String> field7() {
        return DDocSegment.D_DOC_SEGMENT.CONTENT;
    }

    @Override
    public Field<String> field8() {
        return DDocSegment.D_DOC_SEGMENT.CONTENT_TEXT;
    }

    @Override
    public Field<String> field9() {
        return DDocSegment.D_DOC_SEGMENT.CONTENT_STORE;
    }

    @Override
    public Field<Integer> field10() {
        return DDocSegment.D_DOC_SEGMENT.SORT;
    }

    @Override
    public Field<Integer> field11() {
        return DDocSegment.D_DOC_SEGMENT.LEVEL;
    }

    @Override
    public Field<String> field12() {
        return DDocSegment.D_DOC_SEGMENT.DOC_ID;
    }

    @Override
    public Field<String> field13() {
        return DDocSegment.D_DOC_SEGMENT.PARENT_ID;
    }

    @Override
    public Field<String> field14() {
        return DDocSegment.D_DOC_SEGMENT.SIGMA;
    }

    @Override
    public Field<String> field15() {
        return DDocSegment.D_DOC_SEGMENT.LANGUAGE;
    }

    @Override
    public Field<Boolean> field16() {
        return DDocSegment.D_DOC_SEGMENT.ACTIVE;
    }

    @Override
    public Field<String> field17() {
        return DDocSegment.D_DOC_SEGMENT.METADATA;
    }

    @Override
    public Field<LocalDateTime> field18() {
        return DDocSegment.D_DOC_SEGMENT.CREATED_AT;
    }

    @Override
    public Field<String> field19() {
        return DDocSegment.D_DOC_SEGMENT.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field20() {
        return DDocSegment.D_DOC_SEGMENT.UPDATED_AT;
    }

    @Override
    public Field<String> field21() {
        return DDocSegment.D_DOC_SEGMENT.UPDATED_BY;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getCode();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public String component4() {
        return getType();
    }

    @Override
    public String component5() {
        return getPrefix();
    }

    @Override
    public String component6() {
        return getStatus();
    }

    @Override
    public String component7() {
        return getContent();
    }

    @Override
    public String component8() {
        return getContentText();
    }

    @Override
    public String component9() {
        return getContentStore();
    }

    @Override
    public Integer component10() {
        return getSort();
    }

    @Override
    public Integer component11() {
        return getLevel();
    }

    @Override
    public String component12() {
        return getDocId();
    }

    @Override
    public String component13() {
        return getParentId();
    }

    @Override
    public String component14() {
        return getSigma();
    }

    @Override
    public String component15() {
        return getLanguage();
    }

    @Override
    public Boolean component16() {
        return getActive();
    }

    @Override
    public String component17() {
        return getMetadata();
    }

    @Override
    public LocalDateTime component18() {
        return getCreatedAt();
    }

    @Override
    public String component19() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component20() {
        return getUpdatedAt();
    }

    @Override
    public String component21() {
        return getUpdatedBy();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getCode();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public String value4() {
        return getType();
    }

    @Override
    public String value5() {
        return getPrefix();
    }

    @Override
    public String value6() {
        return getStatus();
    }

    @Override
    public String value7() {
        return getContent();
    }

    @Override
    public String value8() {
        return getContentText();
    }

    @Override
    public String value9() {
        return getContentStore();
    }

    @Override
    public Integer value10() {
        return getSort();
    }

    @Override
    public Integer value11() {
        return getLevel();
    }

    @Override
    public String value12() {
        return getDocId();
    }

    @Override
    public String value13() {
        return getParentId();
    }

    @Override
    public String value14() {
        return getSigma();
    }

    @Override
    public String value15() {
        return getLanguage();
    }

    @Override
    public Boolean value16() {
        return getActive();
    }

    @Override
    public String value17() {
        return getMetadata();
    }

    @Override
    public LocalDateTime value18() {
        return getCreatedAt();
    }

    @Override
    public String value19() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value20() {
        return getUpdatedAt();
    }

    @Override
    public String value21() {
        return getUpdatedBy();
    }

    @Override
    public DDocSegmentRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value2(String value) {
        setCode(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value4(String value) {
        setType(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value5(String value) {
        setPrefix(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value6(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value7(String value) {
        setContent(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value8(String value) {
        setContentText(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value9(String value) {
        setContentStore(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value10(Integer value) {
        setSort(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value11(Integer value) {
        setLevel(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value12(String value) {
        setDocId(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value13(String value) {
        setParentId(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value14(String value) {
        setSigma(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value15(String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value16(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value17(String value) {
        setMetadata(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value18(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value19(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value20(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public DDocSegmentRecord value21(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public DDocSegmentRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, String value9, Integer value10, Integer value11, String value12, String value13, String value14, String value15, Boolean value16, String value17, LocalDateTime value18, String value19, LocalDateTime value20, String value21) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        value20(value20);
        value21(value21);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDDocSegment from) {
        setKey(from.getKey());
        setCode(from.getCode());
        setName(from.getName());
        setType(from.getType());
        setPrefix(from.getPrefix());
        setStatus(from.getStatus());
        setContent(from.getContent());
        setContentText(from.getContentText());
        setContentStore(from.getContentStore());
        setSort(from.getSort());
        setLevel(from.getLevel());
        setDocId(from.getDocId());
        setParentId(from.getParentId());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IDDocSegment> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DDocSegmentRecord
     */
    public DDocSegmentRecord() {
        super(DDocSegment.D_DOC_SEGMENT);
    }

    /**
     * Create a detached, initialised DDocSegmentRecord
     */
    public DDocSegmentRecord(String key, String code, String name, String type, String prefix, String status, String content, String contentText, String contentStore, Integer sort, Integer level, String docId, String parentId, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(DDocSegment.D_DOC_SEGMENT);

        setKey(key);
        setCode(code);
        setName(name);
        setType(type);
        setPrefix(prefix);
        setStatus(status);
        setContent(content);
        setContentText(contentText);
        setContentStore(contentStore);
        setSort(sort);
        setLevel(level);
        setDocId(docId);
        setParentId(parentId);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised DDocSegmentRecord
     */
    public DDocSegmentRecord(cn.vertxup.integration.domain.tables.pojos.DDocSegment value) {
        super(DDocSegment.D_DOC_SEGMENT);

        if (value != null) {
            setKey(value.getKey());
            setCode(value.getCode());
            setName(value.getName());
            setType(value.getType());
            setPrefix(value.getPrefix());
            setStatus(value.getStatus());
            setContent(value.getContent());
            setContentText(value.getContentText());
            setContentStore(value.getContentStore());
            setSort(value.getSort());
            setLevel(value.getLevel());
            setDocId(value.getDocId());
            setParentId(value.getParentId());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
            resetChangedOnNotNull();
        }
    }

        public DDocSegmentRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
