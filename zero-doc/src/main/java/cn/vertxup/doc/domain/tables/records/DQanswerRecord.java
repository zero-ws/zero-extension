/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.doc.domain.tables.records;


import cn.vertxup.doc.domain.tables.DQanswer;
import cn.vertxup.doc.domain.tables.interfaces.IDQanswer;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record11;
import org.jooq.Record3;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DQanswerRecord extends UpdatableRecordImpl<DQanswerRecord> implements VertxPojo, Record11<String, String, String, String, String, Boolean, Boolean, Boolean, String, String, String>, IDQanswer {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ZDB.D_QANSWER.REF_ID</code>. 「refId」- 关联考卷中问题实例，对应
     * D_PAPER_REF 表中内容
     */
    @Override
    public DQanswerRecord setRefId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QANSWER.REF_ID</code>. 「refId」- 关联考卷中问题实例，对应
     * D_PAPER_REF 表中内容
     */
    @Override
    public String getRefId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ZDB.D_QANSWER.ANSWER_ID</code>. 「answerId」- 考卷ID
     */
    @Override
    public DQanswerRecord setAnswerId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QANSWER.ANSWER_ID</code>. 「answerId」- 考卷ID
     */
    @Override
    public String getAnswerId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ZDB.D_QANSWER.PAPER_ID</code>. 「paperId」- 规则所属考卷ID
     */
    @Override
    public DQanswerRecord setPaperId(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QANSWER.PAPER_ID</code>. 「paperId」- 规则所属考卷ID
     */
    @Override
    public String getPaperId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>ZDB.D_QANSWER.TYPE</code>. 「type」- 规则类型
     */
    @Override
    public DQanswerRecord setType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QANSWER.TYPE</code>. 「type」- 规则类型
     */
    @Override
    public String getType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ZDB.D_QANSWER.QUESTION_ID</code>. 「questionId」- 问题ID
     */
    @Override
    public DQanswerRecord setQuestionId(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QANSWER.QUESTION_ID</code>. 「questionId」- 问题ID
     */
    @Override
    public String getQuestionId() {
        return (String) get(4);
    }

    /**
     * Setter for <code>ZDB.D_QANSWER.IS_REQUIRED</code>. 「isRequired」- 必答题
     */
    @Override
    public DQanswerRecord setIsRequired(Boolean value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QANSWER.IS_REQUIRED</code>. 「isRequired」- 必答题
     */
    @Override
    public Boolean getIsRequired() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>ZDB.D_QANSWER.IS_ATTACHED</code>. 「isAttached」- 附件必须
     */
    @Override
    public DQanswerRecord setIsAttached(Boolean value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QANSWER.IS_ATTACHED</code>. 「isAttached」- 附件必须
     */
    @Override
    public Boolean getIsAttached() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>ZDB.D_QANSWER.IS_PROOF</code>. 「isProof」- 证据必须
     */
    @Override
    public DQanswerRecord setIsProof(Boolean value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QANSWER.IS_PROOF</code>. 「isProof」- 证据必须
     */
    @Override
    public Boolean getIsProof() {
        return (Boolean) get(7);
    }

    /**
     * Setter for <code>ZDB.D_QANSWER.RULE_SET</code>. 「ruleSet」- 规则分批执行
     */
    @Override
    public DQanswerRecord setRuleSet(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QANSWER.RULE_SET</code>. 「ruleSet」- 规则分批执行
     */
    @Override
    public String getRuleSet() {
        return (String) get(8);
    }

    /**
     * Setter for <code>ZDB.D_QANSWER.RULE_CONFIG</code>. 「ruleConfig」- 规则相关配置
     */
    @Override
    public DQanswerRecord setRuleConfig(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QANSWER.RULE_CONFIG</code>. 「ruleConfig」- 规则相关配置
     */
    @Override
    public String getRuleConfig() {
        return (String) get(9);
    }

    /**
     * Setter for <code>ZDB.D_QANSWER.RULE_COMPONENT</code>. 「ruleComponent」-
     * 规则执行组件（扩展用）
     */
    @Override
    public DQanswerRecord setRuleComponent(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QANSWER.RULE_COMPONENT</code>. 「ruleComponent」-
     * 规则执行组件（扩展用）
     */
    @Override
    public String getRuleComponent() {
        return (String) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<String, String, String> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, String, String, String, Boolean, Boolean, Boolean, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    public Row11<String, String, String, String, String, Boolean, Boolean, Boolean, String, String, String> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return DQanswer.D_QANSWER.REF_ID;
    }

    @Override
    public Field<String> field2() {
        return DQanswer.D_QANSWER.ANSWER_ID;
    }

    @Override
    public Field<String> field3() {
        return DQanswer.D_QANSWER.PAPER_ID;
    }

    @Override
    public Field<String> field4() {
        return DQanswer.D_QANSWER.TYPE;
    }

    @Override
    public Field<String> field5() {
        return DQanswer.D_QANSWER.QUESTION_ID;
    }

    @Override
    public Field<Boolean> field6() {
        return DQanswer.D_QANSWER.IS_REQUIRED;
    }

    @Override
    public Field<Boolean> field7() {
        return DQanswer.D_QANSWER.IS_ATTACHED;
    }

    @Override
    public Field<Boolean> field8() {
        return DQanswer.D_QANSWER.IS_PROOF;
    }

    @Override
    public Field<String> field9() {
        return DQanswer.D_QANSWER.RULE_SET;
    }

    @Override
    public Field<String> field10() {
        return DQanswer.D_QANSWER.RULE_CONFIG;
    }

    @Override
    public Field<String> field11() {
        return DQanswer.D_QANSWER.RULE_COMPONENT;
    }

    @Override
    public String component1() {
        return getRefId();
    }

    @Override
    public String component2() {
        return getAnswerId();
    }

    @Override
    public String component3() {
        return getPaperId();
    }

    @Override
    public String component4() {
        return getType();
    }

    @Override
    public String component5() {
        return getQuestionId();
    }

    @Override
    public Boolean component6() {
        return getIsRequired();
    }

    @Override
    public Boolean component7() {
        return getIsAttached();
    }

    @Override
    public Boolean component8() {
        return getIsProof();
    }

    @Override
    public String component9() {
        return getRuleSet();
    }

    @Override
    public String component10() {
        return getRuleConfig();
    }

    @Override
    public String component11() {
        return getRuleComponent();
    }

    @Override
    public String value1() {
        return getRefId();
    }

    @Override
    public String value2() {
        return getAnswerId();
    }

    @Override
    public String value3() {
        return getPaperId();
    }

    @Override
    public String value4() {
        return getType();
    }

    @Override
    public String value5() {
        return getQuestionId();
    }

    @Override
    public Boolean value6() {
        return getIsRequired();
    }

    @Override
    public Boolean value7() {
        return getIsAttached();
    }

    @Override
    public Boolean value8() {
        return getIsProof();
    }

    @Override
    public String value9() {
        return getRuleSet();
    }

    @Override
    public String value10() {
        return getRuleConfig();
    }

    @Override
    public String value11() {
        return getRuleComponent();
    }

    @Override
    public DQanswerRecord value1(String value) {
        setRefId(value);
        return this;
    }

    @Override
    public DQanswerRecord value2(String value) {
        setAnswerId(value);
        return this;
    }

    @Override
    public DQanswerRecord value3(String value) {
        setPaperId(value);
        return this;
    }

    @Override
    public DQanswerRecord value4(String value) {
        setType(value);
        return this;
    }

    @Override
    public DQanswerRecord value5(String value) {
        setQuestionId(value);
        return this;
    }

    @Override
    public DQanswerRecord value6(Boolean value) {
        setIsRequired(value);
        return this;
    }

    @Override
    public DQanswerRecord value7(Boolean value) {
        setIsAttached(value);
        return this;
    }

    @Override
    public DQanswerRecord value8(Boolean value) {
        setIsProof(value);
        return this;
    }

    @Override
    public DQanswerRecord value9(String value) {
        setRuleSet(value);
        return this;
    }

    @Override
    public DQanswerRecord value10(String value) {
        setRuleConfig(value);
        return this;
    }

    @Override
    public DQanswerRecord value11(String value) {
        setRuleComponent(value);
        return this;
    }

    @Override
    public DQanswerRecord values(String value1, String value2, String value3, String value4, String value5, Boolean value6, Boolean value7, Boolean value8, String value9, String value10, String value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDQanswer from) {
        setRefId(from.getRefId());
        setAnswerId(from.getAnswerId());
        setPaperId(from.getPaperId());
        setType(from.getType());
        setQuestionId(from.getQuestionId());
        setIsRequired(from.getIsRequired());
        setIsAttached(from.getIsAttached());
        setIsProof(from.getIsProof());
        setRuleSet(from.getRuleSet());
        setRuleConfig(from.getRuleConfig());
        setRuleComponent(from.getRuleComponent());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IDQanswer> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DQanswerRecord
     */
    public DQanswerRecord() {
        super(DQanswer.D_QANSWER);
    }

    /**
     * Create a detached, initialised DQanswerRecord
     */
    public DQanswerRecord(String refId, String answerId, String paperId, String type, String questionId, Boolean isRequired, Boolean isAttached, Boolean isProof, String ruleSet, String ruleConfig, String ruleComponent) {
        super(DQanswer.D_QANSWER);

        setRefId(refId);
        setAnswerId(answerId);
        setPaperId(paperId);
        setType(type);
        setQuestionId(questionId);
        setIsRequired(isRequired);
        setIsAttached(isAttached);
        setIsProof(isProof);
        setRuleSet(ruleSet);
        setRuleConfig(ruleConfig);
        setRuleComponent(ruleComponent);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised DQanswerRecord
     */
    public DQanswerRecord(cn.vertxup.doc.domain.tables.pojos.DQanswer value) {
        super(DQanswer.D_QANSWER);

        if (value != null) {
            setRefId(value.getRefId());
            setAnswerId(value.getAnswerId());
            setPaperId(value.getPaperId());
            setType(value.getType());
            setQuestionId(value.getQuestionId());
            setIsRequired(value.getIsRequired());
            setIsAttached(value.getIsAttached());
            setIsProof(value.getIsProof());
            setRuleSet(value.getRuleSet());
            setRuleConfig(value.getRuleConfig());
            setRuleComponent(value.getRuleComponent());
            resetChangedOnNotNull();
        }
    }

        public DQanswerRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
