/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.doc.domain.tables.daos;


import cn.vertxup.doc.domain.tables.DQanswer;
import cn.vertxup.doc.domain.tables.records.DQanswerRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;
import org.jooq.Record3;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DQanswerDao extends AbstractVertxDAO<DQanswerRecord, cn.vertxup.doc.domain.tables.pojos.DQanswer, Record3<String, String, String>, Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>>, Future<cn.vertxup.doc.domain.tables.pojos.DQanswer>, Future<Integer>, Future<Record3<String, String, String>>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<DQanswerRecord,cn.vertxup.doc.domain.tables.pojos.DQanswer,Record3<String, String, String>> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public DQanswerDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(DQanswer.D_QANSWER, cn.vertxup.doc.domain.tables.pojos.DQanswer.class, new JDBCClassicQueryExecutor<DQanswerRecord,cn.vertxup.doc.domain.tables.pojos.DQanswer,Record3<String, String, String>>(configuration,cn.vertxup.doc.domain.tables.pojos.DQanswer.class,vertx));
        }

        @Override
        protected Record3<String, String, String> getId(cn.vertxup.doc.domain.tables.pojos.DQanswer object) {
                return compositeKeyRecord(object.getRuleSet(), object.getRefId(), object.getType());
        }

        /**
     * Find records that have <code>REF_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByRefId(Collection<String> values) {
                return findManyByCondition(DQanswer.D_QANSWER.REF_ID.in(values));
        }

        /**
     * Find records that have <code>REF_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByRefId(Collection<String> values, int limit) {
                return findManyByCondition(DQanswer.D_QANSWER.REF_ID.in(values),limit);
        }

        /**
     * Find records that have <code>ANSWER_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByAnswerId(Collection<String> values) {
                return findManyByCondition(DQanswer.D_QANSWER.ANSWER_ID.in(values));
        }

        /**
     * Find records that have <code>ANSWER_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByAnswerId(Collection<String> values, int limit) {
                return findManyByCondition(DQanswer.D_QANSWER.ANSWER_ID.in(values),limit);
        }

        /**
     * Find records that have <code>PAPER_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByPaperId(Collection<String> values) {
                return findManyByCondition(DQanswer.D_QANSWER.PAPER_ID.in(values));
        }

        /**
     * Find records that have <code>PAPER_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByPaperId(Collection<String> values, int limit) {
                return findManyByCondition(DQanswer.D_QANSWER.PAPER_ID.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByType(Collection<String> values) {
                return findManyByCondition(DQanswer.D_QANSWER.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(DQanswer.D_QANSWER.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>QUESTION_ID IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByQuestionId(Collection<String> values) {
                return findManyByCondition(DQanswer.D_QANSWER.QUESTION_ID.in(values));
        }

        /**
     * Find records that have <code>QUESTION_ID IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByQuestionId(Collection<String> values, int limit) {
                return findManyByCondition(DQanswer.D_QANSWER.QUESTION_ID.in(values),limit);
        }

        /**
     * Find records that have <code>IS_REQUIRED IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByIsRequired(Collection<Boolean> values) {
                return findManyByCondition(DQanswer.D_QANSWER.IS_REQUIRED.in(values));
        }

        /**
     * Find records that have <code>IS_REQUIRED IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByIsRequired(Collection<Boolean> values, int limit) {
                return findManyByCondition(DQanswer.D_QANSWER.IS_REQUIRED.in(values),limit);
        }

        /**
     * Find records that have <code>IS_ATTACHED IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByIsAttached(Collection<Boolean> values) {
                return findManyByCondition(DQanswer.D_QANSWER.IS_ATTACHED.in(values));
        }

        /**
     * Find records that have <code>IS_ATTACHED IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByIsAttached(Collection<Boolean> values, int limit) {
                return findManyByCondition(DQanswer.D_QANSWER.IS_ATTACHED.in(values),limit);
        }

        /**
     * Find records that have <code>IS_PROOF IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByIsProof(Collection<Boolean> values) {
                return findManyByCondition(DQanswer.D_QANSWER.IS_PROOF.in(values));
        }

        /**
     * Find records that have <code>IS_PROOF IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByIsProof(Collection<Boolean> values, int limit) {
                return findManyByCondition(DQanswer.D_QANSWER.IS_PROOF.in(values),limit);
        }

        /**
     * Find records that have <code>RULE_CONFIG IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByRuleConfig(Collection<String> values) {
                return findManyByCondition(DQanswer.D_QANSWER.RULE_CONFIG.in(values));
        }

        /**
     * Find records that have <code>RULE_CONFIG IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByRuleConfig(Collection<String> values, int limit) {
                return findManyByCondition(DQanswer.D_QANSWER.RULE_CONFIG.in(values),limit);
        }

        /**
     * Find records that have <code>RULE_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByRuleComponent(Collection<String> values) {
                return findManyByCondition(DQanswer.D_QANSWER.RULE_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>RULE_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DQanswer>> findManyByRuleComponent(Collection<String> values, int limit) {
                return findManyByCondition(DQanswer.D_QANSWER.RULE_COMPONENT.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<DQanswerRecord,cn.vertxup.doc.domain.tables.pojos.DQanswer,Record3<String, String, String>> queryExecutor(){
                return (JDBCClassicQueryExecutor<DQanswerRecord,cn.vertxup.doc.domain.tables.pojos.DQanswer,Record3<String, String, String>>) super.queryExecutor();
        }
}
