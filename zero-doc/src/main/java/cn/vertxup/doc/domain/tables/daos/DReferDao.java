/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.doc.domain.tables.daos;


import cn.vertxup.doc.domain.tables.DRefer;
import cn.vertxup.doc.domain.tables.records.DReferRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;
import org.jooq.Record4;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DReferDao extends AbstractVertxDAO<DReferRecord, cn.vertxup.doc.domain.tables.pojos.DRefer, Record4<String, String, String, String>, Future<List<cn.vertxup.doc.domain.tables.pojos.DRefer>>, Future<cn.vertxup.doc.domain.tables.pojos.DRefer>, Future<Integer>, Future<Record4<String, String, String, String>>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<DReferRecord,cn.vertxup.doc.domain.tables.pojos.DRefer,Record4<String, String, String, String>> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public DReferDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(DRefer.D_REFER, cn.vertxup.doc.domain.tables.pojos.DRefer.class, new JDBCClassicQueryExecutor<DReferRecord,cn.vertxup.doc.domain.tables.pojos.DRefer,Record4<String, String, String, String>>(configuration,cn.vertxup.doc.domain.tables.pojos.DRefer.class,vertx));
        }

        @Override
        protected Record4<String, String, String, String> getId(cn.vertxup.doc.domain.tables.pojos.DRefer object) {
                return compositeKeyRecord(object.getFromId(), object.getFromType(), object.getToId(), object.getToType());
        }

        /**
     * Find records that have <code>FROM_TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DRefer>> findManyByFromType(Collection<String> values) {
                return findManyByCondition(DRefer.D_REFER.FROM_TYPE.in(values));
        }

        /**
     * Find records that have <code>FROM_TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DRefer>> findManyByFromType(Collection<String> values, int limit) {
                return findManyByCondition(DRefer.D_REFER.FROM_TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>TO_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DRefer>> findManyByToId(Collection<String> values) {
                return findManyByCondition(DRefer.D_REFER.TO_ID.in(values));
        }

        /**
     * Find records that have <code>TO_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DRefer>> findManyByToId(Collection<String> values, int limit) {
                return findManyByCondition(DRefer.D_REFER.TO_ID.in(values),limit);
        }

        /**
     * Find records that have <code>TO_TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DRefer>> findManyByToType(Collection<String> values) {
                return findManyByCondition(DRefer.D_REFER.TO_TYPE.in(values));
        }

        /**
     * Find records that have <code>TO_TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DRefer>> findManyByToType(Collection<String> values, int limit) {
                return findManyByCondition(DRefer.D_REFER.TO_TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>INLINE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DRefer>> findManyByInline(Collection<Boolean> values) {
                return findManyByCondition(DRefer.D_REFER.INLINE.in(values));
        }

        /**
     * Find records that have <code>INLINE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DRefer>> findManyByInline(Collection<Boolean> values, int limit) {
                return findManyByCondition(DRefer.D_REFER.INLINE.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DRefer>> findManyByComment(Collection<String> values) {
                return findManyByCondition(DRefer.D_REFER.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DRefer>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(DRefer.D_REFER.COMMENT.in(values),limit);
        }

        /**
     * Find records that have <code>REFER_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DRefer>> findManyByReferComponent(Collection<String> values) {
                return findManyByCondition(DRefer.D_REFER.REFER_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>REFER_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.doc.domain.tables.pojos.DRefer>> findManyByReferComponent(Collection<String> values, int limit) {
                return findManyByCondition(DRefer.D_REFER.REFER_COMPONENT.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<DReferRecord,cn.vertxup.doc.domain.tables.pojos.DRefer,Record4<String, String, String, String>> queryExecutor(){
                return (JDBCClassicQueryExecutor<DReferRecord,cn.vertxup.doc.domain.tables.pojos.DRefer,Record4<String, String, String, String>>) super.queryExecutor();
        }
}
