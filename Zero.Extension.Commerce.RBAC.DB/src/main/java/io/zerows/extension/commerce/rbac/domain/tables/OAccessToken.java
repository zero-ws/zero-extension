/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.rbac.domain.tables;


import io.zerows.extension.commerce.rbac.domain.Keys;
import io.zerows.extension.commerce.rbac.domain.Zdb;
import io.zerows.extension.commerce.rbac.domain.tables.records.OAccessTokenRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OAccessToken extends TableImpl<OAccessTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.O_ACCESS_TOKEN</code>
     */
    public static final OAccessToken O_ACCESS_TOKEN = new OAccessToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OAccessTokenRecord> getRecordType() {
        return OAccessTokenRecord.class;
    }

    /**
     * The column <code>ZDB.O_ACCESS_TOKEN.KEY</code>. 「key」- 令牌主键
     */
    public final TableField<OAccessTokenRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 令牌主键");

    /**
     * The column <code>ZDB.O_ACCESS_TOKEN.TOKEN</code>. 「token」- 用户的Token信息
     */
    public final TableField<OAccessTokenRecord, byte[]> TOKEN = createField(DSL.name("TOKEN"), SQLDataType.BLOB, this, "「token」- 用户的Token信息");

    /**
     * The column <code>ZDB.O_ACCESS_TOKEN.AUTH</code>. 「auth」- 用户的ID的 byte[] 信息
     */
    public final TableField<OAccessTokenRecord, byte[]> AUTH = createField(DSL.name("AUTH"), SQLDataType.BLOB, this, "「auth」- 用户的ID的 byte[] 信息");

    /**
     * The column <code>ZDB.O_ACCESS_TOKEN.EXPIRED_TIME</code>. 「expiredTime」-
     * 用户的Token过期时间
     */
    public final TableField<OAccessTokenRecord, Long> EXPIRED_TIME = createField(DSL.name("EXPIRED_TIME"), SQLDataType.BIGINT, this, "「expiredTime」- 用户的Token过期时间");

    /**
     * The column <code>ZDB.O_ACCESS_TOKEN.REFRESH_TOKEN</code>. 「refreshToken」-
     * 用户的刷新令牌
     */
    public final TableField<OAccessTokenRecord, byte[]> REFRESH_TOKEN = createField(DSL.name("REFRESH_TOKEN"), SQLDataType.BLOB, this, "「refreshToken」- 用户的刷新令牌");

    /**
     * The column <code>ZDB.O_ACCESS_TOKEN.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<OAccessTokenRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");

    /**
     * The column <code>ZDB.O_ACCESS_TOKEN.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<OAccessTokenRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");

    /**
     * The column <code>ZDB.O_ACCESS_TOKEN.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<OAccessTokenRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");

    /**
     * The column <code>ZDB.O_ACCESS_TOKEN.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<OAccessTokenRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");

    /**
     * The column <code>ZDB.O_ACCESS_TOKEN.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<OAccessTokenRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");

    private OAccessToken(Name alias, Table<OAccessTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private OAccessToken(Name alias, Table<OAccessTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.O_ACCESS_TOKEN</code> table reference
     */
    public OAccessToken(String alias) {
        this(DSL.name(alias), O_ACCESS_TOKEN);
    }

    /**
     * Create an aliased <code>ZDB.O_ACCESS_TOKEN</code> table reference
     */
    public OAccessToken(Name alias) {
        this(alias, O_ACCESS_TOKEN);
    }

    /**
     * Create a <code>ZDB.O_ACCESS_TOKEN</code> table reference
     */
    public OAccessToken() {
        this(DSL.name("O_ACCESS_TOKEN"), null);
    }

    public <O extends Record> OAccessToken(Table<O> child, ForeignKey<O, OAccessTokenRecord> key) {
        super(child, key, O_ACCESS_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<OAccessTokenRecord> getPrimaryKey() {
        return Keys.KEY_O_ACCESS_TOKEN_PRIMARY;
    }

    @Override
    public OAccessToken as(String alias) {
        return new OAccessToken(DSL.name(alias), this);
    }

    @Override
    public OAccessToken as(Name alias) {
        return new OAccessToken(alias, this);
    }

    @Override
    public OAccessToken as(Table<?> alias) {
        return new OAccessToken(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OAccessToken rename(String name) {
        return new OAccessToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OAccessToken rename(Name name) {
        return new OAccessToken(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OAccessToken rename(Table<?> name) {
        return new OAccessToken(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, byte[], byte[], Long, byte[], String, Boolean, String, LocalDateTime, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super String, ? super byte[], ? super byte[], ? super Long, ? super byte[], ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super String, ? super byte[], ? super byte[], ? super Long, ? super byte[], ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
