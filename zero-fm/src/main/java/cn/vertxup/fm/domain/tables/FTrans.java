/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.fm.domain.tables;


import cn.vertxup.fm.domain.Keys;
import cn.vertxup.fm.domain.Zdb;
import cn.vertxup.fm.domain.tables.records.FTransRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function18;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FTrans extends TableImpl<FTransRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.F_TRANS</code>
     */
    public static final FTrans F_TRANS = new FTrans();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FTransRecord> getRecordType() {
        return FTransRecord.class;
    }

    /**
     * The column <code>ZDB.F_TRANS.KEY</code>. 「key」- 交易单主键ID
     */
    public final TableField<FTransRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 交易单主键ID");

    /**
     * The column <code>ZDB.F_TRANS.NAME</code>. 「name」 - 交易单标题
     */
    public final TableField<FTransRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」 - 交易单标题");

    /**
     * The column <code>ZDB.F_TRANS.CODE</code>. 「code」 - 交易单编号
     */
    public final TableField<FTransRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255).nullable(false), this, "「code」 - 交易单编号");

    /**
     * The column <code>ZDB.F_TRANS.SERIAL</code>. 「serial」 - 交易单据号
     */
    public final TableField<FTransRecord, String> SERIAL = createField(DSL.name("SERIAL"), SQLDataType.VARCHAR(36).nullable(false), this, "「serial」 - 交易单据号");

    /**
     * The column <code>ZDB.F_TRANS.TYPE</code>. 「type」 - 交易单类型
     */
    public final TableField<FTransRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(32).nullable(false), this, "「type」 - 交易单类型");

    /**
     * The column <code>ZDB.F_TRANS.STATUS</code>. 「status」 - 交易状态
     */
    public final TableField<FTransRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(36).nullable(false), this, "「status」 - 交易状态");

    /**
     * The column <code>ZDB.F_TRANS.AMOUNT</code>. 「amount」——价税合计，所有明细对应的实际结算金额
     */
    public final TableField<FTransRecord, BigDecimal> AMOUNT = createField(DSL.name("AMOUNT"), SQLDataType.DECIMAL(18, 2).nullable(false), this, "「amount」——价税合计，所有明细对应的实际结算金额");

    /**
     * The column <code>ZDB.F_TRANS.AMOUNT_PRE</code>. 「amountPre」预付金额
     */
    public final TableField<FTransRecord, BigDecimal> AMOUNT_PRE = createField(DSL.name("AMOUNT_PRE"), SQLDataType.DECIMAL(18, 2), this, "「amountPre」预付金额");

    /**
     * The column <code>ZDB.F_TRANS.PREPAY</code>. 「prepay」- 是否预付
     */
    public final TableField<FTransRecord, Boolean> PREPAY = createField(DSL.name("PREPAY"), SQLDataType.BIT, this, "「prepay」- 是否预付");

    /**
     * The column <code>ZDB.F_TRANS.COMMENT</code>. 「comment」 - 备注
     */
    public final TableField<FTransRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB, this, "「comment」 - 备注");

    /**
     * The column <code>ZDB.F_TRANS.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<FTransRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");

    /**
     * The column <code>ZDB.F_TRANS.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<FTransRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");

    /**
     * The column <code>ZDB.F_TRANS.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<FTransRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");

    /**
     * The column <code>ZDB.F_TRANS.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<FTransRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");

    /**
     * The column <code>ZDB.F_TRANS.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<FTransRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");

    /**
     * The column <code>ZDB.F_TRANS.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<FTransRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");

    /**
     * The column <code>ZDB.F_TRANS.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<FTransRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");

    /**
     * The column <code>ZDB.F_TRANS.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<FTransRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private FTrans(Name alias, Table<FTransRecord> aliased) {
        this(alias, aliased, null);
    }

    private FTrans(Name alias, Table<FTransRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.F_TRANS</code> table reference
     */
    public FTrans(String alias) {
        this(DSL.name(alias), F_TRANS);
    }

    /**
     * Create an aliased <code>ZDB.F_TRANS</code> table reference
     */
    public FTrans(Name alias) {
        this(alias, F_TRANS);
    }

    /**
     * Create a <code>ZDB.F_TRANS</code> table reference
     */
    public FTrans() {
        this(DSL.name("F_TRANS"), null);
    }

    public <O extends Record> FTrans(Table<O> child, ForeignKey<O, FTransRecord> key) {
        super(child, key, F_TRANS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<FTransRecord> getPrimaryKey() {
        return Keys.KEY_F_TRANS_PRIMARY;
    }

    @Override
    public List<UniqueKey<FTransRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_F_TRANS_CODE, Keys.KEY_F_TRANS_SERIAL);
    }

    @Override
    public FTrans as(String alias) {
        return new FTrans(DSL.name(alias), this);
    }

    @Override
    public FTrans as(Name alias) {
        return new FTrans(alias, this);
    }

    @Override
    public FTrans as(Table<?> alias) {
        return new FTrans(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FTrans rename(String name) {
        return new FTrans(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FTrans rename(Name name) {
        return new FTrans(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FTrans rename(Table<?> name) {
        return new FTrans(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<String, String, String, String, String, String, BigDecimal, BigDecimal, Boolean, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function18<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? super Boolean, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function18<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? super Boolean, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
